    - name: Create VPC
      ec2_vpc_net:
        name:             "{{ vpc_name }}"
        cidr_block:       "{{ vpc_cidr_block }}"
        region:           "{{ aws_region }}"
        state:            "present"
      register: my_vpc
      until: my_vpc.vpc.state == "available"
      delay: 10
      retries: 3  

    - name: Wait 5 seconds
      pause:
        seconds: 5
        
    - name: VPC Status
      debug:
        msg: "{{ my_vpc.vpc.state }}"
    
    - name: VPC Dump
      debug:
        var: my_vpc

    - name: Set VPC ID in variable
      set_fact:
        vpc_id:           "{{ my_vpc.vpc.id }}"

    - name: Create Public Subnet
      ec2_vpc_subnet:
        state:            "present"
        vpc_id:           "{{ vpc_id }}"
        cidr:             "{{ vpc_subnet_cidr }}"
        az:               "{{ aws_region + aws_zone }}"
        region:           "{{ aws_region }}"
        resource_tags:
          Name:           "J_SUBNET"
      register: my_public_subnet

    - name: Wait 5 seconds
      pause:
        seconds: 5
        
    - name: Subnet Dump
      debug:
        msg: my_public_subnet

    - name: Set Public Subnet ID in variable
      set_fact:
        public_subnet_id: "{{ my_public_subnet.subnet.id }}"

    - name: Create Internet Gateway for VPC
      ec2_vpc_igw:
        vpc_id:           "{{ vpc_id }}"
        region:           "{{ aws_region }}"
        tags:
          Name: "J_IGW"
        state:            "present"
      register: my_vpc_igw

    - name: Wait 5 seconds
      pause:
        seconds: 5
        
    - name: IGW dump
      debug:
        var: my_vpc_igw

    - name: Set Internet Gateway ID in variable
      set_fact:
        igw_id: "{{ my_vpc_igw.gateway_id }}"

    - name: Set up public subnet route table
      ec2_vpc_route_table:
        vpc_id:           "{{ vpc_id }}"
        region:           "{{ aws_region }}"
        tags:
          Name:           "J_ROUTE"
        subnets:
          - "{{ public_subnet_id }}"
        routes:
          - dest:         "0.0.0.0/0"
            gateway_id:   "{{ igw_id }}"

    - name: Wait 5 seconds
      pause:
        seconds: 5
        
    - name: Add EC2 key
      ec2_key:
        name: J_KEY
        key_material: "{{ public_key }}" 
        region: "{{ aws_region }}"        
        state: present

    - name: Wait 5 seconds
      pause:
        seconds: 5
        
    - name: Setup security/firewall settings::SSH
      ec2_group:
        name: JMeter_Security_Grp
        description: Rules allowing traffic on port 22 for SSH connection
        vpc_id: "{{ vpc_id }}"         
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ ssh_allowed_source_ip }}"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0          
        tags:
          Sec: "PrivSack_Sec_Grp"

    - name: Wait 5 seconds
      pause:
        seconds: 5
        
    - name: Setup security/firewall settings::default
      ec2_group:        
        name: JMeter_default_Grp
        description: Rules allowing VPC traffic
        vpc_id: "{{ vpc_id }}"
        region: "us-east-1"
        rules:
          - proto: all
            from_port: -1
            to_port: -1
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        tags:
          Sec: "PrivStack_Sec_Grp"


    - name: Create AWS LB Servers
      ec2:
        vpc_subnet_id: "{{ public_subnet_id }}"
        private_ip: "{{ item }}"
        region: "{{ aws_region }}"
        instance_type: "{{ jm_instance_type }}"
        image: "{{ jm_image }}"
        assign_public_ip: yes
        key_name: J_KEY
        group: JMeter_Security_Grp,JMeter_default_Grp
        instance_tags:
          Name: "{{ LB_tag }}"
          Server: "{{ LB_tag }}"
        state: present
        wait: yes
      with_items: '{{ jm_private_ips }}'
      register: ec2_out

    - name: Display output
      debug:
        var: ec2_out.results.item

    - name: Display item output
      debug:
        msg: "{{ item.instances.0.public_dns_name }}"
      with_items: "{{ ec2_out.results }}"

    - name: Wait for SSH to come up
      wait_for: host={{ item.instances.0.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: '{{ ec2_out.results }}'

    - name: Create AWS APP Servers
      ec2:
        vpc_subnet_id: "{{ public_subnet_id }}"
        private_ip: "{{ item }}"
        region: "{{ aws_region }}"
        instance_type: "{{ js_instance_type }}"
        image: "{{ js_image }}"
        assign_public_ip: yes
        key_name: J_KEY
        group: JMeter_Security_Grp,JMeter_default_Grp
        instance_tags:
          Name: "{{ APP_tag }}"
          Server: "{{ APP_tag }}"
        state: present
        wait: yes
      with_items: '{{ js_private_ips }}'
      register: ec2_out

    - name: Wait for SSH to come up
      wait_for: host={{ item.instances.0.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: '{{ ec2_out.results }}'

    - name: Create AWS DB Servers
      ec2:
        vpc_subnet_id: "{{ public_subnet_id }}"
        private_ip: "{{ item }}"
        region: "{{ aws_region }}"
        instance_type: "{{ db_instance_type }}"
        image: "{{ db_image }}"
        assign_public_ip: yes
        key_name: J_KEY
        group: JMeter_Security_Grp,JMeter_default_Grp
        instance_tags:
          Name: "{{ DB_tag }}"
          Server: "{{ DB_tag }}"
        state: present
        wait: yes
      with_items: '{{ db_private_ips }}'
      register: ec2_out

    - name: Wait for SSH to come up
      wait_for: host={{ item.instances.0.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: '{{ ec2_out.results }}'

